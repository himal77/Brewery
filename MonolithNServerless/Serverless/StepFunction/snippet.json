{
  "Comment": "Place order for customer or for brewing",
  "StartAt": "BeerNotPresent",
  "States": {
    "BeerNotPresent": {
      "Type": "Choice",
      "Choices": [
        {
          "Not": {
            "Variable": "$.beerUpc",
            "IsPresent": true
          },
          "Next": "BeerUpcAbsent"
        }
      ],
      "Default": "ProcessOrder"
    },
    "BeerUpcAbsent": {
      "Type": "Pass",
      "End": true,
      "Parameters": {
        "Message": "BeerUPC not present"
      }
    },
    "ProcessOrder": {
      "Comment": "Check for processing the custome order or brew order",
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.OrderType",
          "StringEquals": "BREW_ORDER",
          "Next": "Brew_Order"
        },
        {
          "Variable": "$.OrderType",
          "StringEquals": "CUSTOMER_ORDER",
          "Next": "Customer_Order"
        }
      ]
    },
    "Brew_Order": {
      "Type": "Pass",
      "Next": "SaveBrewAndIncreaseBeer",
      "Parameters": {
        "body": {
          "breweryId.$": "$$.Execution.Input.breweryId",
          "beerUpc.$": "$$.Execution.Input.beerUpc",
          "quantity.$": "$$.Execution.Input.quantity"
        },
        "queryStringParameters": {
          "changeCmdType": "increase",
          "beerUpc.$": "$$.Execution.Input.beerUpc",
          "quantity.$": "$$.Execution.Input.quantity"
        }
      }
    },
    "SaveBrewAndIncreaseBeer": {
      "Type": "Parallel",
      "Branches": [
        {
          "StartAt": "SaveBrewOrder",
          "States": {
            "SaveBrewOrder": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "Payload.$": "$",
                "FunctionName": "arn:aws:lambda:us-west-2:781251715253:function:brewery-BrewOrderService4SaveBrewOrder-mqmeL6uNphoV:$LATEST"
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException"
                  ],
                  "IntervalSeconds": 2,
                  "MaxAttempts": 6,
                  "BackoffRate": 2
                }
              ],
              "End": true
            }
          }
        },
        {
          "StartAt": "ChangeBeerQuantity_increase",
          "States": {
            "ChangeBeerQuantity_increase": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "OutputPath": "$.Payload",
              "Parameters": {
                "Payload.$": "$",
                "FunctionName": "arn:aws:lambda:us-west-2:781251715253:function:brewery-BeerInventoryService4ChangeBeerQuantity-9GUb5DwK5Nt6:$LATEST"
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException"
                  ],
                  "IntervalSeconds": 2,
                  "MaxAttempts": 6,
                  "BackoffRate": 2
                }
              ],
              "End": true
            }
          }
        }
      ],
      "Parameters": {
        "body.$": "States.JsonToString($.body)",
        "queryStringParameters.$": "$.queryStringParameters"
      },
      "Next": "BrewOrderSuccessful"
    },
    "BrewOrderSuccessful": {
      "Type": "Pass",
      "End": true,
      "Parameters": {
        "Message": "Brew order successful",
        "breweryId": "$$.Execution.Input.breweryId",
        "beerUpc": "$$.Execution.Input.beerUpc",
        "quantity": "$$.Execution.Input.quantity"
      }
    },
    "Customer_Order": {
      "Type": "Pass",
      "Next": "GetBeerInventory",
      "Parameters": {
        "queryStringParameters": {
          "beerUpc.$": "$.beerUpc"
        }
      }
    },
    "GetBeerInventory": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "Payload.$": "$",
        "FunctionName": "arn:aws:lambda:us-west-2:781251715253:function:brewery-BeerInventoryService4GetBeerInventory-dABAB7IMWiLh:$LATEST"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException"
          ],
          "IntervalSeconds": 2,
          "MaxAttempts": 6,
          "BackoffRate": 2
        }
      ],
      "Next": "StringToJson",
      "ResultSelector": {
        "body.$": "$.Payload.body"
      }
    },
    "StringToJson": {
      "Type": "Pass",
      "Next": "GetBeerInventoryFilter",
      "Parameters": {
        "body.$": "States.StringToJson($.body)"
      }
    },
    "GetBeerInventoryFilter": {
      "Type": "Pass",
      "Next": "Lambda Invoke",
      "Parameters": {
        "aQuantity.$": "$.body.quantityOnHand",
        "dQuantity.$": "$$.Execution.Input.quantity"
      }
    },
    "Lambda Invoke": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "OutputPath": "$.Payload",
      "Parameters": {
        "Payload.$": "$",
        "FunctionName": "arn:aws:lambda:us-west-2:781251715253:function:DemandDivideAvailabilityBeer:$LATEST"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException"
          ],
          "IntervalSeconds": 2,
          "MaxAttempts": 6,
          "BackoffRate": 2
        }
      ],
      "Next": "IsBeerQuantityAvailable"
    },
    "IsBeerQuantityAvailable": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.ratio",
          "NumericGreaterThan": 1,
          "Next": "Yes"
        }
      ],
      "Default": "BeerQuantityNotAvailable"
    },
    "BeerQuantityNotAvailable": {
      "Type": "Pass",
      "End": true,
      "Result": {
        "beerUpc": "$$.Execution.Input.beerUpc",
        "quantity": "$$.Execution.Input.quantity",
        "message": "Error processing request, Not Enough Quantity in the inventory"
      },
      "Parameters": {
        "Message": "Customer order cannot be fullfill, inventory low",
        "customerId.$": "$$.Execution.Input.customerId",
        "beerUpc.$": "$$.Execution.Input.beerUpc",
        "quantity.$": "$$.Execution.Input.quantity"
      }
    },
    "Yes": {
      "Type": "Pass",
      "Next": "Parallel",
      "Parameters": {
        "body": {
          "customerId.$": "$$.Execution.Input.customerId",
          "beerUpc.$": "$$.Execution.Input.beerUpc",
          "quantity.$": "$$.Execution.Input.quantity"
        },
        "queryStringParameters": {
          "changeCmdType": "decrease",
          "beerUpc.$": "$$.Execution.Input.beerUpc",
          "quantity.$": "$$.Execution.Input.quantity"
        }
      }
    },
    "Parallel": {
      "Type": "Parallel",
      "Next": "CustomerOrderSuccessful",
      "Branches": [
        {
          "StartAt": "SaveBeerOrder",
          "States": {
            "SaveBeerOrder": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "OutputPath": "$.Payload",
              "Parameters": {
                "Payload.$": "$",
                "FunctionName": "arn:aws:lambda:us-west-2:781251715253:function:brewery-CustomerOrderService4SaveCustomerOrder-s08t7ibQl8EV:$LATEST"
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException"
                  ],
                  "IntervalSeconds": 2,
                  "MaxAttempts": 6,
                  "BackoffRate": 2
                }
              ],
              "End": true
            }
          }
        },
        {
          "StartAt": "ChangeBeerQuanity_Decrease",
          "States": {
            "ChangeBeerQuanity_Decrease": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "OutputPath": "$.Payload",
              "Parameters": {
                "Payload.$": "$",
                "FunctionName": "arn:aws:lambda:us-west-2:781251715253:function:brewery-BeerInventoryService4ChangeBeerQuantity-9GUb5DwK5Nt6:$LATEST"
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException"
                  ],
                  "IntervalSeconds": 2,
                  "MaxAttempts": 6,
                  "BackoffRate": 2
                }
              ],
              "End": true
            }
          }
        }
      ],
      "Parameters": {
        "body.$": "States.JsonToString($.body)",
        "queryStringParameters.$": "$.queryStringParameters"
      }
    },
    "CustomerOrderSuccessful": {
      "Type": "Pass",
      "End": true,
      "Parameters": {
        "customerId.$": "$$.Execution.Input.customerId",
        "beerUpc.$": "$$.Execution.Input.beerUpc",
        "quantity.$": "$$.Execution.Input.quantity"
      },
      "Result": {
        "breweryId": "$.breweryId",
        "beerUpc": "$.beerUpc",
        "quantity": "$.quantity"
      }
    }
  }
}